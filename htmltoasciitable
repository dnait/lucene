package lucenedemo.extract;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class TableGenerator {

	private int PADDING_SIZE = 2;
	private String NEW_LINE = "\n";
	private String TABLE_JOINT_SYMBOL = "+";
	private String TABLE_V_SPLIT_SYMBOL = "|";
	private String TABLE_H_SPLIT_SYMBOL = "-";

	public String generateTable(List<String> headersList, List<List<String>> rowsList, int... overRiddenHeaderHeight) {
		StringBuilder stringBuilder = new StringBuilder();

		int rowHeight = overRiddenHeaderHeight.length > 0 ? overRiddenHeaderHeight[0] : 1;

		Map<Integer, Integer> columnMaxWidthMapping = getMaximumWidhtofTable(headersList, rowsList);

		stringBuilder.append(NEW_LINE);
		stringBuilder.append(NEW_LINE);
		createRowLine(stringBuilder, headersList.size(), columnMaxWidthMapping);
		stringBuilder.append(NEW_LINE);

		for (int headerIndex = 0; headerIndex < headersList.size(); headerIndex++) {
			fillCell(stringBuilder, headersList.get(headerIndex), headerIndex, columnMaxWidthMapping);
		}

		stringBuilder.append(NEW_LINE);

		createRowLine(stringBuilder, headersList.size(), columnMaxWidthMapping);

		for (List<String> row : rowsList) {

			for (int i = 0; i < rowHeight; i++) {
				stringBuilder.append(NEW_LINE);
			}

			for (int cellIndex = 0; cellIndex < row.size(); cellIndex++) {
				fillCell(stringBuilder, row.get(cellIndex), cellIndex, columnMaxWidthMapping);
			}

		}

		stringBuilder.append(NEW_LINE);
		createRowLine(stringBuilder, headersList.size(), columnMaxWidthMapping);
		stringBuilder.append(NEW_LINE);
		stringBuilder.append(NEW_LINE);

		return stringBuilder.toString();
	}

	private void fillSpace(StringBuilder stringBuilder, int length) {
		for (int i = 0; i < length; i++) {
			stringBuilder.append(" ");
		}
	}

	private void createRowLine(StringBuilder stringBuilder, int headersListSize,
			Map<Integer, Integer> columnMaxWidthMapping) {
		for (int i = 0; i < headersListSize; i++) {
			if (i == 0) {
				stringBuilder.append(TABLE_JOINT_SYMBOL);
			}

			for (int j = 0; j < columnMaxWidthMapping.get(i) + PADDING_SIZE * 2; j++) {
				stringBuilder.append(TABLE_H_SPLIT_SYMBOL);
			}
			stringBuilder.append(TABLE_JOINT_SYMBOL);
		}
	}

	private Map<Integer, Integer> getMaximumWidhtofTable(List<String> headersList, List<List<String>> rowsList) {
		Map<Integer, Integer> columnMaxWidthMapping = new HashMap<Integer, Integer>();

		for (int columnIndex = 0; columnIndex < headersList.size(); columnIndex++) {
			columnMaxWidthMapping.put(columnIndex, 0);
		}

		for (int columnIndex = 0; columnIndex < headersList.size(); columnIndex++) {

			if (headersList.get(columnIndex).length() > columnMaxWidthMapping.get(columnIndex)) {
				columnMaxWidthMapping.put(columnIndex, headersList.get(columnIndex).length());
			}
		}

		for (List<String> row : rowsList) {

			for (int columnIndex = 0; columnIndex < row.size(); columnIndex++) {

				if (row.get(columnIndex).length() > columnMaxWidthMapping.get(columnIndex)) {
					columnMaxWidthMapping.put(columnIndex, row.get(columnIndex).length());
				}
			}
		}

		for (int columnIndex = 0; columnIndex < headersList.size(); columnIndex++) {

			if (columnMaxWidthMapping.get(columnIndex) % 2 != 0) {
				columnMaxWidthMapping.put(columnIndex, columnMaxWidthMapping.get(columnIndex) + 1);
			}
		}

		return columnMaxWidthMapping;
	}

	private int getOptimumCellPadding(int cellIndex, int datalength, Map<Integer, Integer> columnMaxWidthMapping,
			int cellPaddingSize) {
		if (datalength % 2 != 0) {
			datalength++;
		}

		if (datalength < columnMaxWidthMapping.get(cellIndex)) {
			cellPaddingSize = cellPaddingSize + (columnMaxWidthMapping.get(cellIndex) - datalength) / 2;
		}

		return cellPaddingSize;
	}

	private void fillCell(StringBuilder stringBuilder, String cell, int cellIndex,
			Map<Integer, Integer> columnMaxWidthMapping) {

		int cellPaddingSize = getOptimumCellPadding(cellIndex, cell.length(), columnMaxWidthMapping, PADDING_SIZE);

		if (cellIndex == 0) {
			stringBuilder.append(TABLE_V_SPLIT_SYMBOL);
		}

		fillSpace(stringBuilder, cellPaddingSize);
		stringBuilder.append(cell);
		if (cell.length() % 2 != 0) {
			stringBuilder.append(" ");
		}

		fillSpace(stringBuilder, cellPaddingSize);

		stringBuilder.append(TABLE_V_SPLIT_SYMBOL);

	}

	public static void main(String[] args) {
		TableGenerator tg = new TableGenerator();
		List<String> headersList = new ArrayList<String>();
		headersList.add("firstname");
		headersList.add("lastname");
		headersList.add("Age");
		List<List<String>> rowsList = new ArrayList<List<String>>();
		List<String> row = new ArrayList<String>();
		List<String> row1 = new ArrayList<String>();
		row.add("www.google.com.cm.cn.Alice/action=lastname = ? age = 40? AliceLastname");
		row.add("Frank");
		row.add("40");
		rowsList.add(row);
		row1.add("Michael");
		row1.add("Flattley");
		row1.add("55");
		rowsList.add(row1);
		int overRiddenHeaderHeight = 1;

		System.out.println(tg.generateTable(headersList, rowsList, overRiddenHeaderHeight));
	}
	
	/*
	 * Elements elementobj = doc.select("table>tr");
		This gets the first level children.
	 */

	public static String TableToPlainText() {
		String tablehtml = "</table><table style=\"width:100%\">  <tbody><tr><th>Firstname</th><th>Lastname</th> <th>Age</th>  </tr>  <tr><td>Jill</td><td>Smith</td><td>50</td>  </tr>  <tr><td>Eve</td><td>Jackson</td><td>94</td>  </tr>  <tr><td>John</td><td>Doe</td><td>80</td>  </tr></tbody></table>";
		Document doc = Jsoup.parse(tablehtml);
		Elements tablaRegistros = doc.select("table");
		String res = "";
		for (Element row : tablaRegistros.select("tr")) {
			for (Element column : row.select("td")) {
				res += column.text() + ",";
			}
			res += "\n";
		}
		return res;
	}
	

}
